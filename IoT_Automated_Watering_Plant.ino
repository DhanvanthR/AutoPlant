#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "IoT_Automated_Watering_Plant"
  https://create.arduino.cc/cloud/things/e3a9b9f8-dcae-4c99-9200-3921116d11ba 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String rgb;
  CloudSwitch power;
  int humidity;
  int ldr;
  int temp;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

#define SEALEVELPRESSURE_HPA (1025.85)

Adafruit_BME280 bme;

#define light A0
#define soil A1
#define red A2
#define green A3
#define blue A4
#define mos 6
int stats = 0;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  unsigned status;
  
  status = bme.begin(0x76); 

  // Defined in thingProperties.h
  initProperties();
  
  pinMode(light, INPUT);
  pinMode(soil, INPUT);
  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);
  pinMode(mos, OUTPUT);

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() { //Constantly update the IoT Monitor Dashboard of these values to keep an eye on the plant
  ArduinoCloud.update();
  // Your code here 
  onHumidityChange();
  onTempChange();
  onRgbChange();
  onLdrChange();
  onPowerChange();
  
  
}

void onLdrChange() {
  // Do something
  ldr = analogRead(light);
}


void onHumidityChange() {
  // Do something
  humidity = bme.readHumidity();

  
  
}



void onRgbChange() {
  // Do something
  stats = analogRead(soil);
  Serial.println(stats);
  if (stats > 757) {
    analogWrite(red, 0);
    analogWrite(green, 255);
    analogWrite(blue, 0);
    rgb = "Water Needed";
    
  }
  else if (stats < 758) {
    analogWrite(red, 255);
    analogWrite(green, 0);
    analogWrite(blue, 0);
    rgb = "No water needed.";
  }
}


void onTempChange() {
  // Do something
  temp = bme.readTemperature();

}


void onPowerChange() {
  // Do something
  if (stats > 758) {
    digitalWrite(mos, HIGH);
    power = HIGH;
  }
  else if (stats < 757) {
    digitalWrite(mos, LOW);
    power = LOW;
  }
}


